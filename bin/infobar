#!/bin/bash
set -x

colorscheme=1

notify_id=""
:notify() {
    arg=""
    if [[ "$notify_id" ]]; then
        arg="-r $notify_id"
    fi

    notify_id=$(notify-desktop $arg -t 1000 "INFORMATION" -- "$*")
}

:body-append() {
    local section="$1"
    local content="$2"

    if [[ ! "$content" ]]; then
        return
    fi

    if [[ "${body:-}" ]]; then
        local endl=$'\n'
        body="${body}${endl}"
    fi

    content="$(sed '2,$s/^/         /' <<<"$content")"
    #printf '%-8s %s\n' "$section" "$content"

    local token=(${section})
    local section=$(printf '<b>%-8s</b>' "$section")

    append="$section $content"

    body="${body}$append"
}

:span-bg-fg() {
    local bg=$1
    local fg=$2
    local content="$3"
    printf '<span foreground="%s" background="%s">%s</span>' "$fg" "$bg" "$content"
}

:span-colors() {
    local bg=$1
    local fg=$2
    local content="$3"

    :span-bg-fg "$(color-to-hex $bg)" "$(color-to-hex $fg)" "$content"
}

:get-section-time() {
    TZ="${1:-}" date +'%T %a %d-%m-%Y'
}

:get-section-battery() {
    battery=$(acpi -b 2>/dev/null \
        | grep -v 'rate information unavailable' \
        | sed -r \
            -e 's/Battery [0-9]:\s*//' \
            -e 's/ until charged//' \
            -e 's/ remaining//' \
            -e 's/Discharging,/↓/' \
            -e 's/Full,/✓/' \
            -e 's/Charging,/↑/' \
            -e 's/,//')
    if [[ "$battery" =~ "rate information unavailable" ]]; then
        return
    fi

    if [[ "$battery" =~ "↓" ]]; then
        :span-colors 196 255 "$battery"
        return
    fi

    if [[ "$battery" =~ "↑" ]]; then
        :span-colors 28 255 "$battery"
        return
    fi

    echo "$battery"
}

:get-section-memory() {
    ram=$(free -h -w |
        awk '/^Mem:/ { print $4 "/" $2}' | sed 's/Gi/G/g')
    arc=$(arcstat -f arcsz,c | tail -n1 | awk '{print $1 "/" $2}')
    echo "$ram $arc"
}

:get-section-cpu() {
    numbers=($(grep -P 'cpu\d' /proc/stat |
        awk '{ usage=($2+$4)*100/($2+$4+$5); printf "%.0f%\n", usage }'))

    len="${#numbers[@]}"
    if [[ $len -gt 8 ]]; then
        half=$((len / 2))
        echo "${numbers[@]:1:$half}"
        echo "${numbers[@]:$half:$len}"
    else
        echo "${numbers[@]}"
    fi
}

:get-section-wifi() {
    local wifi=$(wifi)
    echo "$wifi"
}

:get-section-vpn() {
    if ! sudo wg show all peers | awk '{print $1}'; then
        echo "<b>INSECURE</b>"
    fi
}

:get-section-ping() {
    ping -c 1 8.8.8.8 | grep -Po 'time=\K.*'
}

:get-section-location() {
    if ! my-location | head -c 23; then
        return
    fi
}


_bg=""
:body-save() {
    echo "$body" >/var/run/user/$UID/infobar.body
}

:bg-body-append() {
    if [[ ! "$_bg" ]]; then
        _bg=x

        :body-save
    fi

    (
        flock 200
        body="$(cat /var/run/user/$UID/infobar.body)"
        :body-append "$1" "$2"
        :notify "$body"
        :body-save
    ) 200>/var/run/user/$UID/infobar.lock &
}

:main() {
    local datetime=""
    local battery=""
    local body=""

    timezone=$(cat /etc/timezone)
    :body-append "TIME LOC" "<u>$(:get-section-time "$timezone")</u>"
    :body-append "TIME UTC" "<b>$(:get-section-time UTC)</b>"
    :body-append "MEMORY" "$(:get-section-memory)"
    :body-append "WIFI" "$(:get-section-wifi)"
    :body-append "BATTERY" "$(:get-section-battery)"
    :body-append "VPN" "$(:get-section-vpn)"
    :notify "$body"

    #:bg-body-append "LOC" "$(:get-section-location)"
    #:bg-body-append "PING" $(:get-section-ping)

    wait
}

:main "${@}"
