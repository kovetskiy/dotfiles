global !p
import px
import re
import px.whitespaces
import px.cursor
import random

def guess_component_name():
	path = os.path.basename(px.buffer.get().name)
	return path.replace('.tsx', '').replace('.ts', '')
endglobal

snippet c "" w
const $1 = $0;
endsnippet

snippet cf "" w
const $1 = ($2) => {
  $0
}
endsnippet

snippet cc "" w
export interface `!p snip.rv=t[1]`Props {
  $2
}

export const $1 = (props: $1Props) => {
  $0
}
endsnippet

snippet ip "" w
export interface `!p snip.rv=t[1]`Props {
  $2
}

export class $1 extends Component<$1Props> {
  render() {
    $0
  }
}
endsnippet

snippet i "" w
if ($1) {
  $0
}
endsnippet

snippet a "" w
($1) => $0
endsnippet

snippet p "console.log" b
debug('XXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0])
` $0')
endsnippet

snippet cl "console.log" b
console.log('XXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0])
` $0')
endsnippet

snippet pr "console.log" b
debug('XXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0])
` `!p snip.rv=t[1]`', $1)
endsnippet

snippet cp "console.log" b
console.log('XXXXXX `!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv = filename + ":" + str(cursor[0])
` `!p snip.rv=t[1]`', $1)
endsnippet

snippet tt "" w
{tt('$0')}
endsnippet

snippet sc "" w
const styles = StyleSheet.create({
  $0
});
endsnippet

snippet o "" w
$1: {
  $0
},
endsnippet

snippet "^e" "export" rA
export $0
endsnippet

snippet rr "" w
import React from 'react';

export const ${1:`!p snip.rv=guess_component_name()`} = ($2) => {
  $0
}
endsnippet

snippet rc "" w
return (
  $0
)
endsnippet

snippet r "" w
return $0
endsnippet

snippet t "" w
<Text>$0</Text>
endsnippet

snippet v "" w
<View $1>
  $0
</View>
endsnippet

snippet s "" w
style={{$0}}
endsnippet

snippet br "" w
backgroundColor: '`!p
r = lambda: random.randint(0,255)
try:
	once
except:
	once = True
	snip.rv = '#%02X%02X%02X' % (r(),r(),r())
`'
endsnippet

snippet an "" w
($1) => {
	$0
}
endsnippet

snippet us "" w
const [$1, set`!p 
name = t[1]
if not name:
	snip.rv = ''
else:
	snip.rv = name[0].upper() + name[1:]
`] = React.useState($2);
endsnippet

snippet uv "" w
const [$1] = React.useState(() => ${2:${VISUAL}});
endsnippet

snippet nav "" w
type $1NavigationProp = StackNavigationProp<
  $2,
  '$1'
>;

type $1RouteProp = RouteProp<$2, '$1'>;

type $1Props = {
  navigation: $1NavigationProp;
  route: $1RouteProp;
};
endsnippet

snippet hh "" w
this.$1 = ${2:data.}$1;
endsnippet

snippet ud "" w
$1($2)`!p 
if t[3] != '':
	snip.rv = ':'
else:
	snip.rv = ''
` $3 {
  $0
}
endsnippet

snippet ac "" w
action(() => {
  $0
})
endsnippet

priority 2
snippet .t "" i
.then($0)
endsnippet

snippet pro "" w
new Promise((resolve, reject) => {
   $0
})
endsnippet

snippet ob "" w
<Observer>{() => ${VISUAL}}</Observer>
endsnippet

snippet pf "" w
<Profiler id="$0">
  ${VISUAL}
</Profiler>
endsnippet

snippet "export\s+i" "" r
export interface $1 {
  $0
}
endsnippet

snippet "export\s+t" "" r
export type $1 = {
  $0
}
endsnippet

snippet uid "" w
`!p
try:
	once
except NameError:
	once = True
	import subprocess
	snip.rv = subprocess.Popen(
		['uuidgen'],
		stdout=subprocess.PIPE
	).communicate()[0].rstrip().decode('utf-8')
`
endsnippet

snippet tx "" w
this$0
endsnippet

snippet q "" w
$1 ? ${2:$1} : ${3:''}
endsnippet

snippet uc "" w
const $1 = React.useCallback(() => {
  $2
}, [$3])
endsnippet

snippet uf "" w
React.useEffect(() => {
	$0
}, [])
endsnippet

snippet ufe "" w
useFocusEffect(
  useCallback(() => {
    $0
  }, []),
);
endsnippet

snippet "^\s+f" "" wr
  $1: ($2) => ${3:void};$0
endsnippet

snippet fo "" w
for (const $1 of $2) {
  $0
}
endsnippet

snippet pp "" w
{$1}: {${2:`!p
props = t[1].split(',')
result = []
for prop in props:
	if prop:
		varType = prop[0].upper() + prop[1:]
		result.append(prop+': '+varType)
snip.rv = '; '.join(result)
`}}
endsnippet

snippet vv "" w
$1={${2:$1}}
endsnippet

snippet cn "" w
catch(notify)
endsnippet

snippet ttr "" w
try {
	${1:${VISUAL}}
} catch (err) {
	throw new TranslatedError(tt('$0'))
}
endsnippet

snippet tk "" w
React.useEffect(() => {
  track('$1: mount');
  return () => {
    track('$1: unmount');
  }
}, []);
track('$1: render');
endsnippet
